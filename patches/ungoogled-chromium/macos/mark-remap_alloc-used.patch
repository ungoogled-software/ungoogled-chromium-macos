--- a/build/rust/std/remap_alloc.cc
+++ b/build/rust/std/remap_alloc.cc
@@ -74,7 +74,11 @@ extern "C" {
   __attribute__((visibility("default"))) __attribute__((weak))
 #endif
 #else
+#if BUILDFLAG(IS_MAC) && defined(ARCH_CPU_ARM64)
+#define REMAP_ALLOC_ATTRIBUTES __attribute__((used))
+#else
 #define REMAP_ALLOC_ATTRIBUTES __attribute__((weak))
+#endif
 #endif  // COMPONENT_BUILD
 
 // This must exist as the stdlib depends on it to prove that we know the
@@ -84,8 +88,13 @@ extern "C" {
 // Marked as weak as when Rust drives linking it includes this symbol itself,
 // and we don't want a collision due to C++ being in the same link target, where
 // C++ causes us to explicitly link in the stdlib and this symbol here.
+#if BUILDFLAG(IS_MAC) && defined(ARCH_CPU_ARM64)
+[[maybe_unused]]
+__attribute__((used)) unsigned char __rust_no_alloc_shim_is_unstable;
+#else
 [[maybe_unused]]
 __attribute__((weak)) unsigned char __rust_no_alloc_shim_is_unstable;
+#endif
 
 REMAP_ALLOC_ATTRIBUTES void* __rust_alloc(size_t size, size_t align) {
 #if !PA_BUILDFLAG(USE_PARTITION_ALLOC_AS_MALLOC)
