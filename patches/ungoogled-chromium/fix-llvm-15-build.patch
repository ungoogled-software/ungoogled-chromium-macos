--- a/chrome/browser/apps/app_shim/app_shim_manager_mac.cc
+++ b/chrome/browser/apps/app_shim/app_shim_manager_mac.cc
@@ -1540,24 +1540,24 @@ std::map<base::FilePath, int> AppShimMan
   // URLs those profiles can handle.
   std::map<base::FilePath, AppShimRegistry::HandlerInfo> handlers =
       AppShimRegistry::Get()->GetHandlersForApp(params.app_id);
-  for (const auto& [profile, handler_info] : handlers) {
+  for (const auto& handler : handlers) {
     int count = base::ranges::count_if(
-        files, [&handler_info](const base::FilePath& file_path) {
+        files, [&handler](const base::FilePath& file_path) {
           std::string file_extension =
               base::FilePath(file_path.Extension()).AsUTF8Unsafe();
           return file_extension.length() > 1 &&
-                 base::Contains(handler_info.file_handler_extensions,
+                 base::Contains(handler.second.file_handler_extensions,
                                 file_extension);
         });
 
     if (protocol_handler_url.is_valid() &&
-        base::Contains(handler_info.protocol_handlers,
+        base::Contains(handler.second.protocol_handlers,
                        protocol_handler_url.scheme())) {
       count++;
     }
 
     if (count > 0)
-      result[profile] = count;
+      result[handler.first] = count;
   }
   return result;
 }
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -726,14 +726,6 @@ config("compiler") {
       }
 
       ldflags += [ "-Wl,-mllvm,-import-instr-limit=$import_instr_limit" ]
-
-      if (!is_chromeos) {
-        # TODO(https://crbug.com/972449): turn on for ChromeOS when that
-        # toolchain has this flag.
-        # We only use one version of LLVM within a build so there's no need to
-        # upgrade debug info, which can be expensive since it runs the verifier.
-        ldflags += [ "-Wl,-mllvm,-disable-auto-upgrade-debug-info" ]
-      }
     }
 
     # TODO(https://crbug.com/1211155): investigate why this isn't effective on
@@ -779,10 +771,6 @@ config("compiler") {
     ldflags += [ "-Wl,--undefined-version" ]
   }
 
-  if (use_lld && is_apple) {
-    ldflags += [ "-Wl,--strict-auto-link" ]
-  }
-
   # LLD does call-graph-sorted binary layout by default when profile data is
   # present. On Android this increases binary size due to more thinks for long
   # jumps. Turn it off by default and enable selectively for targets where it's
--- a/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc
+++ b/third_party/blink/renderer/core/layout/ng/grid/ng_grid_layout_algorithm.cc
@@ -520,8 +520,11 @@ wtf_size_t NGGridLayoutAlgorithm::BuildG
                                 row_auto_repetitions);
 
   bool has_nested_subgrid = false;
-  auto& [grid_items, layout_data, subtree_size] =
+  auto& sizing_data =
       sizing_tree->CreateSizingData(opt_subgrid_data);
+  auto& grid_items = sizing_data.grid_items;
+  auto& layout_data = sizing_data.layout_data;
+  auto& subtree_size = sizing_data.subtree_size;
 
   if (!must_ignore_children) {
     // Construct grid items that are not subgridded.
@@ -650,8 +653,11 @@ NGGridSizingTree NGGridLayoutAlgorithm::
   NGGridSizingTree sizing_tree;
 
   if (const auto* layout_subtree = ConstraintSpace().GridLayoutSubtree()) {
-    auto& [grid_items, layout_data, subtree_size] =
+    auto& sizing_data =
         sizing_tree.CreateSizingData();
+    auto& grid_items = sizing_data.grid_items;
+    auto& layout_data = sizing_data.layout_data;
+    auto& subtree_size = sizing_data.subtree_size;
 
     const auto& node = Node();
     grid_items =
@@ -1640,8 +1646,11 @@ void NGGridLayoutAlgorithm::InitializeTr
     const absl::optional<GridTrackSizingDirection>& opt_track_direction) const {
   DCHECK(sizing_subtree);
 
-  auto& [grid_items, layout_data, subtree_size] =
+  auto& sizing_data =
       sizing_subtree.SubtreeRootData();
+  auto& grid_items = sizing_data.grid_items;
+  auto& layout_data = sizing_data.layout_data;
+  auto& subtree_size = sizing_data.subtree_size;
 
   auto InitAndCacheTrackSizes = [&](GridTrackSizingDirection track_direction) {
     InitializeTrackCollection(opt_subgrid_data, track_direction, &layout_data);
@@ -1825,8 +1834,11 @@ void NGGridLayoutAlgorithm::CompleteTrac
     bool* opt_needs_additional_pass) const {
   DCHECK(sizing_subtree);
 
-  auto& [grid_items, layout_data, subtree_size] =
+  auto& sizing_data =
       sizing_subtree.SubtreeRootData();
+  auto& grid_items = sizing_data.grid_items;
+  auto& layout_data = sizing_data.layout_data;
+  auto& subtree_size = sizing_data.subtree_size;
 
   const bool is_for_columns = track_direction == kForColumns;
   const bool has_non_definite_track =
--- a/ui/native_theme/native_theme_aura.cc
+++ b/ui/native_theme/native_theme_aura.cc
@@ -117,7 +117,7 @@ SkColor4f NativeThemeAura::FocusRingColo
 #if BUILDFLAG(IS_APPLE)
   // On Mac OSX, the system Accent Color setting is darkened a bit
   // for better contrast.
-  return SkColor4f(base_color.fR, base_color.fG, base_color.fB, 166 / 255.0f);
+  return SkColor4f{base_color.fR, base_color.fG, base_color.fB, 166 / 255.0f};
 #else
   return base_color;
 #endif  // BUILDFLAG(IS_APPLE)
