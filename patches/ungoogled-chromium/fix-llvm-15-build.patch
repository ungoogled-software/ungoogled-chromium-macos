# The second half of this reverts 830fec4889f9c9e3dcdbc29478f668031045f736

--- a/chrome/browser/apps/app_shim/app_shim_manager_mac.cc
+++ b/chrome/browser/apps/app_shim/app_shim_manager_mac.cc
@@ -1447,24 +1447,24 @@ std::map<base::FilePath, int> AppShimMan
   // URLs those profiles can handle.
   std::map<base::FilePath, AppShimRegistry::HandlerInfo> handlers =
       AppShimRegistry::Get()->GetHandlersForApp(params.app_id);
-  for (const auto& [profile, handler_info] : handlers) {
+  for (const auto& handler : handlers) {
     int count = base::ranges::count_if(
-        files, [&handler_info](const base::FilePath& file_path) {
+        files, [&handler](const base::FilePath& file_path) {
           std::string file_extension =
               base::FilePath(file_path.Extension()).AsUTF8Unsafe();
           return file_extension.length() > 1 &&
-                 base::Contains(handler_info.file_handler_extensions,
+                 base::Contains(handler.second.file_handler_extensions,
                                 file_extension);
         });
 
     if (protocol_handler_url.is_valid() &&
-        base::Contains(handler_info.protocol_handlers,
+        base::Contains(handler.second.protocol_handlers,
                        protocol_handler_url.scheme())) {
       count++;
     }
 
     if (count > 0)
-      result[profile] = count;
+      result[handler.first] = count;
   }
   return result;
 }
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -780,10 +780,6 @@ config("compiler") {
     ldflags += [ "-Wl,--undefined-version" ]
   }
 
-  if (use_lld && is_apple) {
-    ldflags += [ "-Wl,--strict-auto-link" ]
-  }
-
   # LLD does call-graph-sorted binary layout by default when profile data is
   # present. On Android this increases binary size due to more thinks for long
   # jumps. Turn it off by default and enable selectively for targets where it's
